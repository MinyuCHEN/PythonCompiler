

/* ---------------Seccion de declaraciones preliminares--------------------*/
package pythoncompiler;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;

/* Codigo del parser, se copia integramente a la clase final.
    Agregamos el manejo de errores. */
parser code {:

    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("ERROR");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            Parser asin = new Parser(
                    new Lexer( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};



/* ------------Declaracion de simbolos terminales y no terminales---------- */

/* Terminales (tokens obtenidos por el analizador lexico).

   Terminales que no tienen un valor son listados primero, los terminales que
   tienen un valor como los enteros son listados en la segunda o demas lineas. */
terminal           ERROR, SEMICOLON_OP, ARITH_OP, L_PARENTHESIS_OP, R_PARENTHESIS_OP, NUM_LIT, AND, BREAK, CLASS, CONTINUE, DEF, ELIF, ELSE, EXCEPT, FINALLY, FOR, IF, IN, INPUT, IS_NOT, OR, PRINT, RETUNR, TRY, WHILE, TYPE_LIST, TYPE_INT, TYPE_FLOAT, TYPE_CHAR, TYPE_STRING, TYPE_BOOLEAN, COMP_OP, ASSIG_OP, LOGICAL_OP, PROPERTY_OP, COLON_OP, IDENTIFIER, L_BRACKET_OP, R_BRACKET_OP, BOOLEAN_LIT, CHAR_LIT, STRING_LIT, BLOCK, TAB_OP, COMMA, RANGE;


/* No terminales usados en la seccion gramatical.

   Primero se lista los no terminales que tienen un valor Object y despues
   se lista los no terminales que tienen un entero. Un Object se refiere a que
   no tienen tipo, pudiendo ser entero o String. */
non terminal Object     program, fun_stmt, class_stmt , list_var_decl, var_decl, par_var_decl, block_stmt;
//non terminal Integer    expr, factor, termino;


/* -------------Seccion de predencia y asociacion de los terminales----------- */

/*
  Precedencia de los no terminales, no sirve con simbolos terminales.
  Por eso no la usamos. Adem√°s indica si se asocia a izquierda o derecha.
*/
  /*precedence left OP_SUMA, OP_RESTA;
  precedence left OP_MULT;*/


/* ------------------- Seccion de la gramatica ------------------------ */

/* La gramatica de nuestro analizador.

   expr_list ::=   expr_list expr_part
                 | expr_part
   expr_part ::=   expr SEMI
   expr      ::=   expr PLUS factor
                 | expr MINUS factor
                 | factor
   factor    ::=   factor TIMES term
                 | factor DIVIDE term
                 | term
   term     ::=    LPAREN expr RPAREN
                 | NUMBER
                 | ID
*/

/* 'expr_list' es la raiz de la gramatica. Una 'expr_list' puede ser una 'expr_list'
   seguida de una expr_part, o puede ser una expr_part.
   Un terminal o no terminal se define <termino> ::= termino1 termino2 ... terminoN.;
   donde termino puede ser terminal o no terminal, solo se permite un simbolo a la
   izquierda. La | sirve para indicar que es una produccion u otra.
   Debemos pasar de simbolos no terminales a simbolos terminales. Una gramatica que no
   termina en simbolos terminales se dice que no reduce, y por lo tanto nunca se finaliza
   su procesado.
*/


  /*----------------------------------PROGRAM STATEMEN----------------------------------*/
  program        ::= fun_stmt
                    |
                    class
                    ;

  /*----------------------------------FUN STATEMEN----------------------------------*/
  list_fun_stmt ::= list_fun_stmt fun_stmt
                    |
                    fun_stmt
                    ;

  fun_stmt      ::= DEF IDENTIFIER L_PARENTHESIS_OP par_var_decl R_PARENTHESIS_OP COLON_OP list_var_decl BLOCK SEMICOLON_OP
                    ;

  /*----------------------------------FUN STATEMEN----------------------------------*/
  class_stmt    ::= CLASS IDENTIFIER COLON_OP list_var_decl
                    ;


  /*----------------------------------VARIABLE DECLARATION----------------------------------*/
  par_var_decl  ::=list_var_decl COMMA var_decl
                    |
                    var_decl
                    ;
  list_var_decl ::= list_var_decl var_decl
                    |
                    var_decl
                    ;
  var_decl      ::= TYPE_INT IDENTIFIER
                    |
                    TYPE_FLOAT IDENTIFIER
                    |
                    TYPE_LIST IDENTIFIER
                    |
                    TYPE_STRING IDENTIFIER
                    |
                    TYPE_BOOLEAN IDENTIFIER
                    |
                    TYPE_CHAR IDENTIFIER
                    | error {:System.err.println(" Type not specified!! \n");:} IDENTIFIER
                    ;

  block_stmt    ::= BLOCK;
